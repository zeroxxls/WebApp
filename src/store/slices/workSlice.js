import { createSlice , createAsyncThunk } from "@reduxjs/toolkit";
import { fetchUserWorks, uploadWork } from "../../api/worksApi";

const initialState = {
  userWorks: [],
  isLoading: false,
  error: null
};

export const workSlice = createSlice({
  name: 'works',
  initialState,
    reducers: {
    setLoading: (state, action) => {
        state.isLoading = action.payload;
    },
    setError: (state, action) => {
        state.error = action.payload;
    },
    clearWorks: (state) => {
        state.userWorks = [];
    },
    addNewWork: (state, action) => {
        state.userWorks.unshift(action.payload);
    }
    },
    extraReducers: (builder) => {
    builder
      .addCase(fetchWorks.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(fetchWorks.fulfilled, (state, action) => {
        state.isLoading = false;
        state.userWorks = action.payload;
      })
      .addCase(fetchWorks.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })
      .addCase(uploadNewWork.fulfilled, (state, action) => {
        state.userWorks.unshift(action.payload);
      })
      .addCase(fetchAllWorks.pending, (state) => { // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
        state.isLoading = true;
        state.error = null;
      })
      .addCase(fetchAllWorks.fulfilled, (state, action) => { // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
        state.isLoading = false;
        // –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç,
        // —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å —Ä–∞–±–æ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        // –ù–∞–ø—Ä–∏–º–µ—Ä: state.allWorks = action.payload;
        state.userWorks = action.payload; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º userWorks
      })
      .addCase(fetchAllWorks.rejected, (state, action) => { // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
        state.isLoading = false;
        state.error = action.payload;
      });
  }
});

export const fetchWorks = createAsyncThunk(
  'works/fetchWorks',
  async (userId, { rejectWithValue }) => {
    try {
      const works = await fetchUserWorks(userId);
      return works;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const fetchAllWorks = createAsyncThunk(
  'works/fetchAllWorks',
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch('http://localhost:4444/works', { // –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      if (!response.ok) {
        const error = await response.json();
        return rejectWithValue(error.message || 'Failed to fetch all works');
      }
      const data = await response.json();
      return data.works;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const uploadNewWork = createAsyncThunk(
  'works/uploadNewWork',
  async (formData, { rejectWithValue }) => {
    try {
      const response = await uploadWork(formData);
      return response.work;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

// üëá –≠–∫—Å–ø–æ—Ä—Ç —ç–∫—à–µ–Ω–æ–≤
export const { setLoading, setError, clearWorks, addNewWork } = workSlice.actions;

export default workSlice.reducer;
